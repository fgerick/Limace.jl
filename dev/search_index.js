var documenterSearchIndex = {"docs":
[{"location":"forces/induction/","page":"Induction","title":"Induction","text":"Modules = [Limace]\nPages = [\"forces/induction.jl\"]","category":"page"},{"location":"forces/induction/#Limace._crossterm!-Union{Tuple{T}, Tuple{PT}, Tuple{T0}, Tuple{TJ}, Tuple{TI}, Tuple{TI, BasisElement{T0, PT, T}, TJ, Vararg{Any, 16}}} where {TI<:Basis, TJ<:Basis, T0<:Basis, PT<:Helmholtz, T}","page":"Induction","title":"Limace._crossterm!","text":"_crossterm!(\n    bi::Basis,\n    B0::BasisElement{T0<:Basis, PT<:Helmholtz, T},\n    bj::Basis,\n    is,\n    js,\n    aijs,\n    i0,\n    j0,\n    li,\n    mi,\n    lj,\n    mj,\n    rwrs,\n    lmn2k_bi,\n    lmn2k_bj,\n    nrangefi,\n    nrangefj,\n    indf,\n    EA;\n    kwargs...\n)\n\n\nFallback functions for _crossterm term for U0. Write specialized function to include e.g. bandedness in n.\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace._crossterm!-Union{Tuple{T}, Tuple{PT}, Tuple{T0}, Tuple{TJ}, Tuple{TI}, Tuple{TI, TJ, BasisElement{T0, PT, T}, Vararg{Any, 16}}} where {TI<:Basis, TJ<:Basis, T0<:Basis, PT<:Helmholtz, T}","page":"Induction","title":"Limace._crossterm!","text":"_crossterm!(\n    bi::Basis,\n    bj::Basis,\n    B0::BasisElement{T0<:Basis, PT<:Helmholtz, T},\n    is,\n    js,\n    aijs,\n    i0,\n    j0,\n    li,\n    mi,\n    lj,\n    mj,\n    rwrs,\n    lmn2k_bi,\n    lmn2k_bj,\n    nrangefi,\n    nrangefj,\n    indf,\n    EA;\n    kwargs...\n)\n\n\nFallback functions for _crossterm! term for B0. Write specialized function to include e.g. bandedness in n.\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace._induction_sSS-Union{Tuple{TC}, Tuple{TB}, Tuple{TA}, Tuple{Type{TA}, Type{TB}, Type{TC}, Volume, Vararg{Any, 5}}} where {TA<:Basis, TB<:Basis, TC<:Basis}","page":"Induction","title":"Limace._induction_sSS","text":"_induction_sSS(\n    ::Type{TA<:Basis},\n    ::Type{TB<:Basis},\n    ::Type{TC<:Basis},\n    V::Volume,\n    lmna,\n    lmnb,\n    lmnc,\n    r,\n    wr;\n    external\n) -> Any\n\n\nComputes radial integral of ∫Sᵢ⋅∇×(pⱼ×Sₖ) dV. Surface integral is given by Adam-Gaunt variable.\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace._induction_sST-Union{Tuple{TC}, Tuple{TB}, Tuple{TA}, Tuple{Type{TA}, Type{TB}, Type{TC}, Volume, Vararg{Any, 5}}} where {TA<:Basis, TB<:Basis, TC<:Basis}","page":"Induction","title":"Limace._induction_sST","text":"_induction_sST(\n    _::Type{TA<:Basis},\n    _::Type{TB<:Basis},\n    _::Type{TC<:Basis},\n    V::Volume,\n    lmna,\n    lmnb,\n    lmnc,\n    r,\n    wr\n) -> Any\n\n\nComputes radial integral of ∫Tᵢ⋅∇×(pⱼ×Sₖ) dV. Surface integral is given by Elsasser variable.\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace._induction_sTS-Union{Tuple{TC}, Tuple{TB}, Tuple{TA}, Tuple{Type{TA}, Type{TB}, Type{TC}, Volume, Vararg{Any, 5}}} where {TA<:Basis, TB<:Basis, TC<:Basis}","page":"Induction","title":"Limace._induction_sTS","text":"_induction_sTS(\n    _::Type{TA<:Basis},\n    _::Type{TB<:Basis},\n    _::Type{TC<:Basis},\n    V::Volume,\n    lmna,\n    lmnb,\n    lmnc,\n    r,\n    wr\n) -> Any\n\n\nComputes radial integral of ∫Sᵢ⋅∇×(pⱼ×Tₖ) dV. Surface integral is given by Elsasser variable.\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace._induction_sTT-Union{Tuple{TC}, Tuple{TB}, Tuple{TA}, Tuple{Type{TA}, Type{TB}, Type{TC}, Volume, Vararg{Any, 5}}} where {TA<:Basis, TB<:Basis, TC<:Basis}","page":"Induction","title":"Limace._induction_sTT","text":"_induction_sTT(\n    _::Type{TA<:Basis},\n    _::Type{TB<:Basis},\n    _::Type{TC<:Basis},\n    V::Volume,\n    lmna,\n    lmnb,\n    lmnc,\n    r,\n    wr\n) -> Any\n\n\nComputes radial integral of ∫Tᵢ⋅∇×(pⱼ×Tₖ) dV. Surface integral is given by Adam-Gaunt variable.\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace._induction_tSS-Union{Tuple{TC}, Tuple{TB}, Tuple{TA}, Tuple{Type{TA}, Type{TB}, Type{TC}, Volume, Vararg{Any, 5}}} where {TA<:Basis, TB<:Basis, TC<:Basis}","page":"Induction","title":"Limace._induction_tSS","text":"_induction_tSS(\n    ::Type{TA<:Basis},\n    ::Type{TB<:Basis},\n    ::Type{TC<:Basis},\n    V::Volume,\n    lmna,\n    lmnb,\n    lmnc,\n    r,\n    wr;\n    external\n) -> Any\n\n\nComputes radial integral of ∫Sᵢ⋅∇×(qⱼ×Sₖ) dV. Surface integral is given by Elsasser variable.\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace._induction_tST-Union{Tuple{TC}, Tuple{TB}, Tuple{TA}, Tuple{Type{TA}, Type{TB}, Type{TC}, Volume, Vararg{Any, 5}}} where {TA<:Basis, TB<:Basis, TC<:Basis}","page":"Induction","title":"Limace._induction_tST","text":"_induction_tST(\n    _::Type{TA<:Basis},\n    _::Type{TB<:Basis},\n    _::Type{TC<:Basis},\n    V::Volume,\n    lmna,\n    lmnb,\n    lmnc,\n    r,\n    wr\n) -> Any\n\n\nComputes radial integral of ∫Tᵢ⋅∇×(qⱼ×Sₖ) dV. Surface integral is given by Adam-Gaunt variable.\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace._induction_tTT-Union{Tuple{TC}, Tuple{TB}, Tuple{TA}, Tuple{Type{TA}, Type{TB}, Type{TC}, Volume, Vararg{Any, 5}}} where {TA<:Basis, TB<:Basis, TC<:Basis}","page":"Induction","title":"Limace._induction_tTT","text":"_induction_tTT(\n    _::Type{TA<:Basis},\n    _::Type{TB<:Basis},\n    _::Type{TC<:Basis},\n    V::Volume,\n    lmna,\n    lmnb,\n    lmnc,\n    r,\n    wr\n) -> Any\n\n\nComputes radial integral of ∫Tᵢ⋅∇×(qⱼ×Tₖ) dV. Surface integral is given by Adam-Gaunt variable.\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace.adamgaunt_ljs-NTuple{4, Any}","page":"Induction","title":"Limace.adamgaunt_ljs","text":"adamgaunt_ljs(li, l0, mj, lmax) -> Any\n\n\nFor a combination of li, l0 and lj only the even lj that satisfy |l0-li|≤lj≤l0+li are nonzero for the Adam-Gaunt variables.\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace.adamgaunt_mjs-Tuple{Any, Any}","page":"Induction","title":"Limace.adamgaunt_mjs","text":"adamgaunt_mjs(mi, m0) -> Any\n\n\nFor a combination of mi, m0 and mj only mj=mi-m0 is nonzero for the Adam-Gaunt variables.\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace.elsasser_ljs-NTuple{4, Any}","page":"Induction","title":"Limace.elsasser_ljs","text":"elsasser_ljs(li, l0, mj, lmax) -> Any\n\n\nFor a combination of li, l0 and lj only the odd lj that satisfy |l0-li|≤lj≤l0+li are nonzero for the Elsasser variables.\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace.elsasser_mjs-Tuple{Any, Any}","page":"Induction","title":"Limace.elsasser_mjs","text":"elsasser_mjs(mi, m0) -> Any\n\n\nFor a combination of mi, m0 and mj only mj=mi-m0 is nonzero for the Elsasser variables.\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace.induction-Union{Tuple{T}, Tuple{T0}, Tuple{TJ}, Tuple{TI}, Tuple{TI, BasisElement{T0, Poloidal, T}, TJ}} where {TI<:Basis, TJ<:Basis, T0<:Basis, T}","page":"Induction","title":"Limace.induction","text":"induction(\n    bbi::Basis,\n    U0::BasisElement{T0<:Basis, Poloidal, T},\n    bbj::Basis;\n    external\n) -> SparseArrays.SparseMatrixCSC{Tv, Int64} where Tv\n\n\nComputes the induction term for a poloidal background velocity U0, a magnetic field basis bbi and a magnetic field basis bbj.\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace.induction-Union{Tuple{T}, Tuple{T0}, Tuple{TJ}, Tuple{TI}, Tuple{TI, BasisElement{T0, Toroidal, T}, TJ}} where {TI<:Basis, TJ<:Basis, T0<:Basis, T}","page":"Induction","title":"Limace.induction","text":"induction(\n    bbi::Basis,\n    U0::BasisElement{T0<:Basis, Toroidal, T},\n    bbj::Basis;\n    external\n) -> SparseArrays.SparseMatrixCSC{Tv, Int64} where Tv\n\n\nComputes the induction term for a toroidal background velocity U0, a magnetic field basis bbi and a magnetic field basis bbj.\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace.induction-Union{Tuple{T}, Tuple{T0}, Tuple{TJ}, Tuple{TI}, Tuple{TI, TJ, BasisElement{T0, Poloidal, T}}} where {TI<:Basis, TJ<:Basis, T0<:Basis, T}","page":"Induction","title":"Limace.induction","text":"induction(\n    bbi::Basis,\n    buj::Basis,\n    B0::BasisElement{T0<:Basis, Poloidal, T};\n    external\n) -> SparseArrays.SparseMatrixCSC{Tv, Int64} where Tv\n\n\nComputes the induction term for a poloidal background magnetic field B0, a magnetic field basis bbi and a velocity basis buj.\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace.induction-Union{Tuple{T}, Tuple{T0}, Tuple{TJ}, Tuple{TI}, Tuple{TI, TJ, BasisElement{T0, Toroidal, T}}} where {TI<:Basis, TJ<:Basis, T0<:Basis, T}","page":"Induction","title":"Limace.induction","text":"induction(\n    bbi::Basis,\n    buj::Basis,\n    B0::BasisElement{T0<:Basis, Toroidal, T};\n    external\n) -> SparseArrays.SparseMatrixCSC{Tv, Int64} where Tv\n\n\nComputes the induction term for a toroidal background magnetic field B0, a magnetic field basis bbi and a velocity basis buj.\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace.induction_threaded-Union{Tuple{T}, Tuple{T0}, Tuple{TJ}, Tuple{TI}, Tuple{TI, BasisElement{T0, Poloidal, T}, TJ}} where {TI<:Basis, TJ<:Basis, T0<:Basis, T}","page":"Induction","title":"Limace.induction_threaded","text":"induction_threaded(\n    bbi::Basis,\n    U0::BasisElement{T0<:Basis, Poloidal, T},\n    bbj::Basis;\n    external\n) -> SparseArrays.SparseMatrixCSC{Tv, Int64} where Tv\n\n\nThreaded version of induction\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace.induction_threaded-Union{Tuple{T}, Tuple{T0}, Tuple{TJ}, Tuple{TI}, Tuple{TI, BasisElement{T0, Toroidal, T}, TJ}} where {TI<:Basis, TJ<:Basis, T0<:Basis, T}","page":"Induction","title":"Limace.induction_threaded","text":"induction_threaded(\n    bbi::Basis,\n    U0::BasisElement{T0<:Basis, Toroidal, T},\n    bbj::Basis;\n    external\n) -> SparseArrays.SparseMatrixCSC{Tv, Int64} where Tv\n\n\nThreaded version of induction\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace.induction_threaded-Union{Tuple{T}, Tuple{T0}, Tuple{TJ}, Tuple{TI}, Tuple{TI, TJ, BasisElement{T0, Poloidal, T}}} where {TI<:Basis, TJ<:Basis, T0<:Basis, T}","page":"Induction","title":"Limace.induction_threaded","text":"induction_threaded(\n    bbi::Basis,\n    buj::Basis,\n    B0::BasisElement{T0<:Basis, Poloidal, T};\n    external\n) -> SparseArrays.SparseMatrixCSC{Tv, Int64} where Tv\n\n\nThreaded version of induction\n\n\n\n\n\n","category":"method"},{"location":"forces/induction/#Limace.induction_threaded-Union{Tuple{T}, Tuple{T0}, Tuple{TJ}, Tuple{TI}, Tuple{TI, TJ, BasisElement{T0, Toroidal, T}}} where {TI<:Basis, TJ<:Basis, T0<:Basis, T}","page":"Induction","title":"Limace.induction_threaded","text":"induction_threaded(\n    bbi::Basis,\n    buj::Basis,\n    B0::BasisElement{T0<:Basis, Toroidal, T};\n    external\n) -> SparseArrays.SparseMatrixCSC{Tv, Int64} where Tv\n\n\nThreaded version of induction\n\n\n\n\n\n","category":"method"},{"location":"poly/#Limace.Poly","page":"Poly","title":"Limace.Poly","text":"","category":"section"},{"location":"poly/","page":"Poly","title":"Poly","text":"Polynomial functions and conveniences.","category":"page"},{"location":"poly/","page":"Poly","title":"Poly","text":"Modules = [Limace.Poly]","category":"page"},{"location":"poly/","page":"Poly","title":"Poly","text":"Modules = [Limace.Poly]","category":"page"},{"location":"poly/#Limace.Poly.D-Tuple{Any, Any, Any}","page":"Poly","title":"Limace.Poly.D","text":"D(f, l, r) -> Any\n\n\nEquation (xx) in Ivers & Phillips (2008).\n\n\n\n\n\n","category":"method"},{"location":"poly/#Limace.Poly._∂ll-NTuple{4, Any}","page":"Poly","title":"Limace.Poly._∂ll","text":"_∂ll(f, l, l1, r) -> Any\n\n\nEquation (25) in Ivers & Phillips (2008).\n\n\n\n\n\n","category":"method"},{"location":"poly/#Limace.Poly.adamgaunt-NTuple{6, Any}","page":"Poly","title":"Limace.Poly.adamgaunt","text":"adamgaunt(la, lb, lc, ma, mb, mc) -> ComplexF64\n\n\nAdam-Gaunt integral $ A_{abc} = ...$.\n\n\n\n\n\n","category":"method"},{"location":"poly/#Limace.Poly.dylmdθ-NTuple{4, Any}","page":"Poly","title":"Limace.Poly.dylmdθ","text":"dylmdθ(l, m, θ, ϕ) -> Any\n\n\nSpherical harmonic derivative in theta.\n\n\n\n\n\n","category":"method"},{"location":"poly/#Limace.Poly.dylmdϕ-NTuple{4, Any}","page":"Poly","title":"Limace.Poly.dylmdϕ","text":"dylmdϕ(l, m, θ, ϕ) -> Any\n\n\nSpherical harmonic derivative in phi.\n\n\n\n\n\n","category":"method"},{"location":"poly/#Limace.Poly.elsasser-NTuple{6, Any}","page":"Poly","title":"Limace.Poly.elsasser","text":"elsasser(la, lb, lc, ma, mb, mc) -> ComplexF64\n\n\nElsasser variable $ E_{abc} = ...$.\n\n\n\n\n\n","category":"method"},{"location":"poly/#Limace.Poly.inners-NTuple{4, Any}","page":"Poly","title":"Limace.Poly.inners","text":"inners(s, s2, l, r) -> Any\n\n\nEquation (xx) in Ivers & Phillips (2008).\n\n\n\n\n\n","category":"method"},{"location":"poly/#Limace.Poly.innert-Union{Tuple{Tr}, Tuple{T2}, Tuple{T1}, Tuple{T1, T2, Int64, Tr}} where {T1, T2, Tr}","page":"Poly","title":"Limace.Poly.innert","text":"innert(t, t2, l::Int64, r) -> Any\n\n\nEquation (xx) in Ivers & Phillips (2008).\n\n\n\n\n\n","category":"method"},{"location":"poly/#Limace.Poly.jacobi-NTuple{4, Any}","page":"Poly","title":"Limace.Poly.jacobi","text":"jacobi(n, a, b, x) -> Any\n\n\nJacobi polynomial J_n^(ab)(x).\n\n\n\n\n\n","category":"method"},{"location":"poly/#Limace.Poly.p-Tuple{Any}","page":"Poly","title":"Limace.Poly.p","text":"p(l) -> Any\n\n\nl(l+1)\n\n\n\n\n\n","category":"method"},{"location":"poly/#Limace.Poly.ylm-Tuple{Int64, Int64, Any, Any}","page":"Poly","title":"Limace.Poly.ylm","text":"ylm(ℓ::Int64, m::Int64, θ, φ) -> Any\n\n\nSpherical harmonic in full norm, i.e. int Y_l^mY_i^j sin(theta)mathrmdthetamathrmdphi = delta_lidelta_mj.\n\n\n\n\n\n","category":"method"},{"location":"bases/viscous/#Limace.ViscousBasis:-Viscous-velocity-basis","page":"ViscousBasis","title":"Limace.ViscousBasis: Viscous velocity basis","text":"","category":"section"},{"location":"bases/viscous/","page":"ViscousBasis","title":"ViscousBasis","text":"Modules = [Limace.ViscousBasis]","category":"page"},{"location":"bases/viscous/","page":"ViscousBasis","title":"ViscousBasis","text":"Modules = [Limace.ViscousBasis]","category":"page"},{"location":"bases/viscous/#Limace.Bases.s-Union{Tuple{T}, Tuple{Type{Basis{Viscous}}, Volume, Any, Any, Any, T}} where T","page":"ViscousBasis","title":"Limace.Bases.s","text":"s(_::Type{Basis{Viscous}}, V::Volume, l, m, n, r) -> Any\n\n\nChen et al. (2018) (2.38), (2.39) poloidal scalar, orthogonal w.r.t ∫ u⋅∇²u dV with 0 ≤ r ≤ 1.\n\n\n\n\n\n","category":"method"},{"location":"bases/viscous/#Limace.Bases.t-Tuple{Type{Basis{Viscous}}, Volume, Vararg{Any, 4}}","page":"ViscousBasis","title":"Limace.Bases.t","text":"t(_::Type{Basis{Viscous}}, V::Volume, l, m, n, r) -> Any\n\n\nChen et al. (2018) toroidal scalar, orthogonal w.r.t ∫ u⋅∇²u dV with 0 ≤ r ≤ 1.\n\n\n\n\n\n","category":"method"},{"location":"forces/lorentz/","page":"Lorentz","title":"Lorentz","text":"Modules = [Limace]\nPages = [\"forces/lorentz.jl\"]","category":"page"},{"location":"forces/lorentz/#Limace.lorentz-Union{Tuple{T}, Tuple{T0}, Tuple{TJ}, Tuple{TI}, Tuple{TI, TJ, BasisElement{T0, Poloidal, T}}} where {TI<:Basis, TJ<:Basis, T0<:Basis, T}","page":"Lorentz","title":"Limace.lorentz","text":"lorentz(\n    bui::Basis,\n    bbj::Basis,\n    B0::BasisElement{T0<:Basis, Poloidal, T}\n) -> SparseArrays.SparseMatrixCSC{Tv, Int64} where Tv\n\n\nComputes the Lorentz term for a poloidal background magnetic field B0, a velocity basis bui and a magnetic field basis bbj.\n\n\n\n\n\n","category":"method"},{"location":"forces/lorentz/#Limace.lorentz-Union{Tuple{T}, Tuple{T0}, Tuple{TJ}, Tuple{TI}, Tuple{TI, TJ, BasisElement{T0, Toroidal, T}}} where {TI<:Basis, TJ<:Basis, T0<:Basis, T}","page":"Lorentz","title":"Limace.lorentz","text":"lorentz(\n    bui::Basis,\n    bbj::Basis,\n    B0::BasisElement{T0<:Basis, Toroidal, T}\n) -> SparseArrays.SparseMatrixCSC{Tv, Int64} where Tv\n\n\nComputes the Lorentz term for a toroidal background magnetic field B0, a velocity basis bui and a magnetic field basis bbj.\n\n\n\n\n\n","category":"method"},{"location":"forces/lorentz/#Limace.lorentz_threaded-Union{Tuple{T}, Tuple{T0}, Tuple{TJ}, Tuple{TI}, Tuple{TI, TJ, BasisElement{T0, Poloidal, T}}} where {TI<:Basis, TJ<:Basis, T0<:Basis, T}","page":"Lorentz","title":"Limace.lorentz_threaded","text":"lorentz_threaded(\n    bui::Basis,\n    bbj::Basis,\n    B0::BasisElement{T0<:Basis, Poloidal, T}\n) -> SparseArrays.SparseMatrixCSC{Tv, Int64} where Tv\n\n\nComputes the Lorentz term for a poloidal background magnetic field B0, a velocity basis bui and a magnetic field basis bbj.\n\n\n\n\n\n","category":"method"},{"location":"forces/lorentz/#Limace.lorentz_threaded-Union{Tuple{T}, Tuple{T0}, Tuple{TJ}, Tuple{TI}, Tuple{TI, TJ, BasisElement{T0, Toroidal, T}}} where {TI<:Basis, TJ<:Basis, T0<:Basis, T}","page":"Lorentz","title":"Limace.lorentz_threaded","text":"lorentz_threaded(\n    bui::Basis,\n    bbj::Basis,\n    B0::BasisElement{T0<:Basis, Toroidal, T}\n) -> SparseArrays.SparseMatrixCSC{Tv, Int64} where Tv\n\n\nComputes the Lorentz term for a toroidal background magnetic field B0, a velocity basis bui and a magnetic field basis bbj.\n\n\n\n\n\n","category":"method"},{"location":"bases/insulating/#Limace.InsulatingBasis:-Insulating-magnetic-field-basis","page":"InsulatingBasis","title":"Limace.InsulatingBasis: Insulating magnetic field basis","text":"","category":"section"},{"location":"bases/insulating/","page":"InsulatingBasis","title":"InsulatingBasis","text":"Modules = [Limace.InsulatingBasis]","category":"page"},{"location":"bases/insulating/","page":"InsulatingBasis","title":"InsulatingBasis","text":"Modules = [Limace.InsulatingBasis]","category":"page"},{"location":"bases/insulating/#Limace.InsulatingBasis.inner_b0norm-Tuple{Any, Any}","page":"InsulatingBasis","title":"Limace.InsulatingBasis.inner_b0norm","text":"inner_b0norm(\n    lmn_p,\n    lmn_t\n) -> SparseArrays.SparseMatrixCSC{ComplexF64, Int64}\n\n\nConvenience functions to normalize a B₀ that is assembled from different components to have (4π/3)⁻¹ ∫₀¹ B⋅B dV = 1 Construct Aᵢⱼ = ∫₀¹ Bᵢ ⋅Bⱼ dV \n\n\n\n\n\n","category":"method"},{"location":"bases/insulating/#Limace.InsulatingBasis.norm_B0fac!-Tuple{Any, Any, Any}","page":"InsulatingBasis","title":"Limace.InsulatingBasis.norm_B0fac!","text":"norm_B0fac!(B0fac, lmn_p, lmn_t)\n\n\nNormalize B0fac (vector of scalars) corresponding to lmn_p and lmn_t basis elements. length(B0fac)=length(lmn_p)+length(lmn_t). Final array of B0fac will ensure that (4π/3)⁻¹ ∫₀¹ B⋅B dV = 1.\n\n\n\n\n\n","category":"method"},{"location":"bases/insulating/#Limace.InsulatingBasis.unitspherenorm-Tuple{Any, Any}","page":"InsulatingBasis","title":"Limace.InsulatingBasis.unitspherenorm","text":"unitspherenorm(l, n) -> Any\n\n\nThe basis elements are normalized so that ∫₀^∞ B⋅B dV = 1. There is no external contribution for the toroidal components.  For the poloidal components with n=1, there is an external contribution (r>1).  To normalize the basis elements so that ∫₀¹ B⋅B dV = 1, the following norm function can be used:\n\n\n\n\n\n","category":"method"},{"location":"misc/#Misc","page":"Misc","title":"Misc","text":"","category":"section"},{"location":"misc/","page":"Misc","title":"Misc","text":"All functions/types that have not been covered elsewhere.","category":"page"},{"location":"misc/","page":"Misc","title":"Misc","text":"Modules = [Limace]\nPages = [\"forces/bc.jl\"]","category":"page"},{"location":"misc/#Limace.boundarycondition!-Union{Tuple{T}, Tuple{TB}, Tuple{Any, TB}, Tuple{Any, TB, Type{T}}} where {TB<:Basis, T<:Number}","page":"Misc","title":"Limace.boundarycondition!","text":"boundarycondition!(A, b::Basis)\nboundarycondition!(A, b::Basis, ::Type{T<:Number})\n\n\n\n\n\n\n","category":"method"},{"location":"misc/#Limace.boundarycondition-Union{Tuple{T}, Tuple{TB}, Tuple{TB, Type{T}}} where {TB<:Basis, T<:Number}","page":"Misc","title":"Limace.boundarycondition","text":"boundarycondition(b::Number)\nboundarycondition(\n    b::Basis,\n    ::Type{T<:Number}\n) -> SparseArrays.SparseMatrixCSC{Tv, Int64} where Tv<:(Complex{T} where T<:Number)\n\n\n\n\n\n\n","category":"method"},{"location":"misc/#Limace.zero_boundarycondition!-Union{Tuple{T}, Tuple{TB}, Tuple{Any, TB}, Tuple{Any, TB, Type{T}}} where {TB<:Basis, T<:Number}","page":"Misc","title":"Limace.zero_boundarycondition!","text":"zero_boundarycondition!(A, b::Basis)\nzero_boundarycondition!(A, b::Basis, ::Type{T<:Number})\n\n\n\n\n\n\n","category":"method"},{"location":"misc/","page":"Misc","title":"Misc","text":"<!– ```@index Modules = [Limace]","category":"page"},{"location":"misc/","page":"Misc","title":"Misc","text":"","category":"page"},{"location":"misc/","page":"Misc","title":"Misc","text":"@autodocs Modules = [Limace] ``` –>","category":"page"},{"location":"bases/inviscid/#Limace.InviscidBasis:-Inviscid-velocity-basis","page":"InviscidBasis","title":"Limace.InviscidBasis: Inviscid velocity basis","text":"","category":"section"},{"location":"bases/inviscid/","page":"InviscidBasis","title":"InviscidBasis","text":"Modules = [Limace.InviscidBasis]","category":"page"},{"location":"bases/inviscid/","page":"InviscidBasis","title":"InviscidBasis","text":"Modules = [Limace.InviscidBasis]","category":"page"},{"location":"bases/inviscid/#Limace.Bases.s-Tuple{Type{Basis{Inviscid}}, Volume, Vararg{Any, 4}}","page":"InviscidBasis","title":"Limace.Bases.s","text":"s(_::Type{Basis{Inviscid}}, V::Volume, l, m, n, r) -> Any\n\n\nhttps://homepages.see.leeds.ac.uk/~earpwl/Galerkin/Galerkin.html (5.6), normalized to unit energy ∫u⋅u dV = 1. \n\n\n\n\n\n","category":"method"},{"location":"bases/inviscid/#Limace.Bases.t-Tuple{Type{Basis{Inviscid}}, Volume, Vararg{Any, 4}}","page":"InviscidBasis","title":"Limace.Bases.t","text":"t(_::Type{Basis{Inviscid}}, V::Volume, l, m, n, r) -> Any\n\n\nhttps://homepages.see.leeds.ac.uk/~earpwl/Galerkin/Galerkin.html (5.1), normalized to unit energy ∫u⋅u dV = 1.\n\n\n\n\n\n","category":"method"},{"location":"forces/inertial/","page":"Inertia","title":"Inertia","text":"Modules = [Limace]\nPages = [\"forces/inertial.jl\"]","category":"page"},{"location":"forces/inertial/#Limace._inertial_ss-Union{Tuple{T}, Tuple{T, Vararg{Any, 4}}} where T<:Basis","page":"Inertia","title":"Limace._inertial_ss","text":"_inertial_ss(b::Basis, lmna, lmnb, r, wr; external) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"forces/inertial/#Limace._inertial_tt-Union{Tuple{T}, Tuple{T, Vararg{Any, 4}}} where T<:Basis","page":"Inertia","title":"Limace._inertial_tt","text":"_inertial_tt(b::Basis, lmna, lmnb, r, wr) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"forces/inertial/#Limace.inertial-Union{Tuple{T}, Tuple{TB}, Tuple{TB, Type{T}}} where {TB<:Basis, T<:Number}","page":"Inertia","title":"Limace.inertial","text":"inertial(b::Number; ...)\ninertial(\n    b::Basis,\n    ::Type{T<:Number};\n    external\n) -> SparseArrays.SparseMatrixCSC{Tv, Int64} where Tv<:(Complex{T} where T<:Number)\n\n\n\n\n\n\n","category":"method"},{"location":"notebooks/inertialmodes/","page":"Inviscid inertial modes","title":"Inviscid inertial modes","text":"<style>\n    #documenter-page table {\n        display: table !important;\n        margin: 2rem auto !important;\n        border-top: 2pt solid rgba(0,0,0,0.2);\n        border-bottom: 2pt solid rgba(0,0,0,0.2);\n    }\n\n    #documenter-page pre, #documenter-page div {\n        margin-top: 1.4rem !important;\n        margin-bottom: 1.4rem !important;\n    }\n\n    .code-output {\n        padding: 0.7rem 0.5rem !important;\n    }\n\n    .admonition-body {\n        padding: 0em 1.25em !important;\n    }\n</style>\n\n<!-- PlutoStaticHTML.Begin -->\n<!--\n    # This information is used for caching.\n    [PlutoStaticHTML.State]\n    input_sha = \"b975016780911957cc9a8ec992bfdee1c489198a6262e734970679974a9b095c\"\n    julia_version = \"1.10.5\"\n-->\n\n<div class=\"markdown\"><h1>Inviscid inertial modes in the sphere</h1><p>The evolution equation of the velocity <span class=\"tex\">\\(\\mathbf{u}\\)</span> is given by the momentum equation</p><p class=\"tex\">$$\\frac{\\partial\\mathbf{u}}{\\partial t} + 2\\Omega \\mathbf{e}_z\\times\\mathbf{u} = -\\frac{1}{\\rho}\\nabla p,$$</p><p>satisfying <span class=\"tex\">\\(\\mathbf{u}\\cdot\\mathbf{n} = 0\\)</span> at <span class=\"tex\">\\(r=1\\)</span> (the surface of the sphere).</p><p>By projecting this equation onto poloidal and toroidal basis vectors, we eliminate the pressure <span class=\"tex\">\\(p\\)</span>.</p><p>Assuming <span class=\"tex\">\\(\\mathbf{u}(\\mathbf{r},t) = \\mathbf{u}(\\mathbf{r}) \\exp(\\lambda t)\\)</span>, the momentum equation reduces to an eigen problem</p><p class=\"tex\">$$\\lambda \\mathbf{B}\\mathbf{x} = \\mathbf{A}\\mathbf{x},$$</p><p>where the eigen vector <span class=\"tex\">\\(\\mathbf{x}\\)</span> contain the spectral coefficients of the basis elements and</p><p class=\"tex\">$$B_{ij} = \\int \\mathbf{u}_i \\cdot \\mathbf{u}_j\\,\\mathrm{d}V,$$</p><p>and</p><p class=\"tex\">$$A_{ij} = \\int \\mathbf{u}_i \\cdot \\left(2\\Omega\\mathbf{e}_z\\times\\mathbf{u}_j\\right)\\,\\mathrm{d}V.$$</p><p>For moderate polynomial degrees we can quickly solve this.</p></div>\n\n\n\n\n\n\n\n","category":"page"},{"location":"notebooks/inertialmodes/#Solve-using-Limace.jl","page":"Inviscid inertial modes","title":"Solve using Limace.jl","text":"","category":"section"},{"location":"notebooks/inertialmodes/","page":"Inviscid inertial modes","title":"Inviscid inertial modes","text":"<div class=\"markdown\">\n<p>First, load the packages:</p></div>\n\n<pre class='language-julia'><code class='language-julia'>using LinearAlgebra, Limace</code></pre>\n\n\n\n<div class=\"markdown\"><p>Define a polynomial truncation degree <code>N</code>.</p></div>\n\n<pre class='language-julia'><code class='language-julia'>N = 8</code></pre>\n<pre class=\"code-output documenter-example-output\" id=\"var-N\">8</pre>\n\n\n<div class=\"markdown\"><p>Create inviscid velocity basis. Here, we include all azimuthal wave numbers <code>m = -N:N</code> (we can also consider each <code>m</code> individually for the inviscid inertial modes).</p></div>\n\n<pre class='language-julia'><code class='language-julia'>basis = Inviscid(N)</code></pre>\n<pre class=\"code-output documenter-example-output\" id=\"var-basis\">Basis{Inviscid}(8, -8:8, 0:0, InviscidBC(), Limace.Bases.Volume(0.0, 1.0), Dict{Symbol, Float64}())</pre>\n\n\n<div class=\"markdown\"><p>Assemble the matrix <span class=\"tex\">\\(\\mathbf{A}\\)</span> of the Coriolis operator.</p></div>\n\n<pre class='language-julia'><code class='language-julia'>A = Limace.coriolis(basis)</code></pre>\n<pre class=\"code-output documenter-example-output\" id=\"var-A\">276×276 SparseMatrixCSC{ComplexF64, Int64} with 632 stored entries:\n⎡⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠙⠦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎤\n⎢⠀⠀⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀⠙⢄⡀⠈⠓⠢⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥\n⎢⠀⠀⠀⠀⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀⠙⢄⡀⠀⠈⠂⢄⠀⠀⠀⠀⠀⠀⠀⎥\n⎢⠀⠀⠀⠀⠀⠀⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀⠉⢦⣀⠀⠀⠑⢦⡀⠀⠀⠀⠀⎥\n⎢⠀⠀⠀⠀⠀⠀⠀⠀⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⢤⣀⠀⠙⠢⣄⠀⠀⎥\n⎢⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠓⠦⣄⠈⠳⣄⎥\n⎢⣄⠈⠓⢄⠀⠀⠀⠀⠀⠀⠀⠀⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥\n⎢⠈⢧⡀⠈⠓⢄⠀⠀⠀⠀⠀⠀⠀⠀⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥\n⎢⠀⠀⠹⡀⠀⠈⠣⣄⠀⠀⠀⠀⠀⠀⠀⠀⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥\n⎢⠀⠀⠀⠈⠢⠀⠀⠘⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀⎥\n⎢⠀⠀⠀⠀⠀⠑⢄⠀⠀⢳⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⢄⠀⠀⠀⠀⠀⠀⎥\n⎢⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⢄⠀⠀⠀⠀⎥\n⎢⠀⠀⠀⠀⠀⠀⠀⠀⠈⢦⡀⠙⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⢄⠀⠀⎥\n⎣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⢄⎦</pre>\n\n\n<div class=\"markdown\"><p>The inertial matrix (sometimes called mass matrix) is just the unit operator for the <code>Inviscid</code> basis, as it is orthonormal. Due to this orthonormality, the eigen problem reduces to a standard eigenvalue problem. We call <code>Matrix(A)</code> to convert the sparse matrix <code>A</code> to a dense one. <code>eigen</code> gives the dense eigenvalue spectrum. The eigenvalues <code>λ</code> have zero real part, i.e. no viscous damping (you can type <code>λ</code> by typing <code>\\lambda&lt;tab&gt;</code>).</p></div>\n\n<pre class='language-julia'><code class='language-julia'>λ, u = eigen(Matrix(A));</code></pre>\n\n\n\n<div class=\"markdown\"><p>The eigenvectors are stored in a matrix <code>u</code>, so that <code>λ[i]*u[:,i] ≈ A*u[:,i]</code>.</p></div>\n\n<pre class='language-julia'><code class='language-julia'>λ[1]*u[:,1] ≈ A*u[:,1]</code></pre>\n<pre class=\"code-output documenter-example-output\" id=\"var-hash164603\">true</pre>\n\n\n<div class=\"markdown\"><p>We can compare some of the numerically calculated eigenvalues <code>λ</code> to the analytical equation given by Zhang et al. (2008) for equatorially symmetric inertial modes.</p></div>\n\n<pre class='language-julia'><code class='language-julia'>function λ_analytical(m, n) \n    sm = sign(m)\n    m = abs(m)\n    return -sm*2 / (m + 2) * (√(1 + m * (m + 2) / (n * (2n + 2m + 1))) - 1) * im\nend;</code></pre>\n\n\n<pre class='language-julia'><code class='language-julia'>all(m-&gt;any(isapprox(λ_analytical(m,1)), λ), 1:N-1)</code></pre>\n<pre class=\"code-output documenter-example-output\" id=\"var-hash218926\">true</pre>\n\n\n<div class=\"markdown\"><p>Since the <code>Inviscid</code> basis is complete in the Cartesian polynomials, all values are exactly as the analytical value (up to machine precision). For higher values of <code>n</code>, the analytical equation <code>zhang(m, n)</code> is only an approximation and one should compare to the roots of the univariate polynomial that gives the eigenvalues of the inertial modes.</p></div>\n\n","category":"page"},{"location":"notebooks/inertialmodes/#Visualization","page":"Inviscid inertial modes","title":"Visualization","text":"","category":"section"},{"location":"notebooks/inertialmodes/","page":"Inviscid inertial modes","title":"Inviscid inertial modes","text":"<div class=\"markdown\">\n<p>We can plot the velocity of the modes, for example on the surface. The azimuthal and latitudinal velocity of the mode corresponding to <code>zhang(3,1)</code> is shown below.</p></div>\n\n\n<img height=\"200\" src=\"data:image/png;base64, \" style=\"object-fit: contain; height: auto;\" width=\"600\"/>\n\n\n<img height=\"200\" src=\"data:image/png;base64, \" style=\"object-fit: contain; height: auto;\" width=\"600\"/>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- PlutoStaticHTML.End -->","category":"page"},{"location":"notebooks/inertialmodes/","page":"Inviscid inertial modes","title":"Inviscid inertial modes","text":"EditURL = \"https://github.com/fgerick/Limace.jl/blob/main/docs/src/notebooks/inertialmodes.jl\"","category":"page"},{"location":"forces/diffusion/","page":"Diffusion","title":"Diffusion","text":"Modules = [Limace]\nPages = [\"forces/diffusion.jl\"]","category":"page"},{"location":"forces/diffusion/#Limace._diffusion_ss-Union{Tuple{T}, Tuple{T, Vararg{Any, 4}}} where T<:Basis","page":"Diffusion","title":"Limace._diffusion_ss","text":"_diffusion_ss(b::Basis, lmna, lmnb, r, wr; external) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"forces/diffusion/#Limace._diffusion_tt-Union{Tuple{T}, Tuple{T, Vararg{Any, 4}}} where T<:Basis","page":"Diffusion","title":"Limace._diffusion_tt","text":"_diffusion_tt(b::Basis, lmna, lmnb, r, wr) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"forces/diffusion/#Limace.diffusion-Union{Tuple{T}, Tuple{TB}, Tuple{TB, Type{T}}} where {TB<:Basis, T<:Number}","page":"Diffusion","title":"Limace.diffusion","text":"diffusion(b::Number; ...)\ndiffusion(\n    b::Basis,\n    ::Type{T<:Number};\n    applyBC,\n    external\n) -> SparseArrays.SparseMatrixCSC{Tv, Int64} where Tv<:(Complex{T} where T<:Number)\n\n\n\n\n\n\n","category":"method"},{"location":"forces/diffusion/#Limace.diffusion_threaded-Union{Tuple{T}, Tuple{TB}, Tuple{TB, Type{T}}} where {TB<:Basis, T<:Number}","page":"Diffusion","title":"Limace.diffusion_threaded","text":"diffusion_threaded(b::Number; ...)\ndiffusion_threaded(\n    b::Basis,\n    ::Type{T<:Number};\n    applyBC,\n    external\n) -> SparseArrays.SparseMatrixCSC{Tv, Int64} where Tv\n\n\n\n\n\n\n","category":"method"},{"location":"bases/bases/#Limace.Bases","page":"Basis definition","title":"Limace.Bases","text":"","category":"section"},{"location":"bases/bases/","page":"Basis definition","title":"Basis definition","text":"Bases definitions. ","category":"page"},{"location":"bases/bases/","page":"Basis definition","title":"Basis definition","text":"List here the instructions to what needs to be defined for a new basis.\nGive an example of what an extension would look like.\nExplain multiple dispatch and how we can specialize force functions for a given new basis.","category":"page"},{"location":"bases/bases/","page":"Basis definition","title":"Basis definition","text":"Modules = [Limace.Bases]","category":"page"},{"location":"bases/bases/","page":"Basis definition","title":"Basis definition","text":"Modules = [Limace.Bases]","category":"page"},{"location":"bases/bases/#Limace.Bases.Basis","page":"Basis definition","title":"Limace.Bases.Basis","text":"struct Basis{T}\n\nN::Int64\nm::UnitRange{Int64}\nn::UnitRange{Int64}\nBC::BoundaryCondition\nV::Volume\nparams::Dict{Symbol, Float64}\n\n\n\n\n\n","category":"type"},{"location":"bases/bases/#Limace.Bases.BasisElement","page":"Basis definition","title":"Limace.Bases.BasisElement","text":"struct BasisElement{TB<:Basis, PT<:Helmholtz, T<:Number}\n\nlmn::Tuple{Int64, Int64, Int64}\nfactor::Number\n\n\n\n\n\n","category":"type"},{"location":"bases/bases/#Limace.Bases.BoundaryCondition","page":"Basis definition","title":"Limace.Bases.BoundaryCondition","text":"abstract type BoundaryCondition\n\n\n\n\n\n","category":"type"},{"location":"bases/bases/#Limace.Bases.InsulatingBC","page":"Basis definition","title":"Limace.Bases.InsulatingBC","text":"struct InsulatingBC <: BoundaryCondition\n\n\n\n\n\n","category":"type"},{"location":"bases/bases/#Limace.Bases.InviscidBC","page":"Basis definition","title":"Limace.Bases.InviscidBC","text":"struct InviscidBC <: BoundaryCondition\n\n\n\n\n\n","category":"type"},{"location":"bases/bases/#Limace.Bases.NoBC","page":"Basis definition","title":"Limace.Bases.NoBC","text":"struct NoBC <: BoundaryCondition\n\n\n\n\n\n","category":"type"},{"location":"bases/bases/#Limace.Bases.NoSlipBC","page":"Basis definition","title":"Limace.Bases.NoSlipBC","text":"struct NoSlipBC <: BoundaryCondition\n\n\n\n\n\n","category":"type"},{"location":"bases/bases/#Limace.Bases.PerfectlyConductingBC","page":"Basis definition","title":"Limace.Bases.PerfectlyConductingBC","text":"struct PerfectlyConductingBC <: BoundaryCondition\n\n\n\n\n\n","category":"type"},{"location":"forces/#Forces","page":"Summary","title":"Forces","text":"","category":"section"},{"location":"forces/","page":"Summary","title":"Summary","text":"Different forces included in Limace.jl.","category":"page"},{"location":"forces/coriolis/","page":"Coriolis","title":"Coriolis","text":"Modules = [Limace]\nPages = [\"forces/coriolis.jl\"]","category":"page"},{"location":"forces/coriolis/#Limace.C-Tuple{Any, Any}","page":"Coriolis","title":"Limace.C","text":"C(l, m) -> Any\n\n\nEquation (113) in Ivers & Phillips (2008).\n\n\n\n\n\n","category":"method"},{"location":"forces/coriolis/#Limace._coriolis_ss-Union{Tuple{T}, Tuple{T, Vararg{Any, 4}}} where T<:Basis","page":"Coriolis","title":"Limace._coriolis_ss","text":"_coriolis_ss(b::Basis, lmna, lmnb, r, wr; Ω) -> Any\n\n\nFallback for Coriolis term between poloidal and poloidal component, explicitly calculating the quadrature.\n\n\n\n\n\n","category":"method"},{"location":"forces/coriolis/#Limace._coriolis_st-Union{Tuple{T}, Tuple{T, Vararg{Any, 4}}} where T<:Basis","page":"Coriolis","title":"Limace._coriolis_st","text":"_coriolis_st(b::Basis, lmna, lmnb, r, wr; Ω) -> Any\n\n\nFallback for Coriolis term between poloidal and toroidal component, explicitly calculating the quadrature.  Following eq. (114) in Ivers & Phillips (2008).\n\n\n\n\n\n","category":"method"},{"location":"forces/coriolis/#Limace._coriolis_ts-Union{Tuple{T}, Tuple{T, Vararg{Any, 4}}} where T<:Basis","page":"Coriolis","title":"Limace._coriolis_ts","text":"_coriolis_ts(b::Basis, lmna, lmnb, r, wr; Ω) -> Any\n\n\nFallback for Coriolis term between toroidal and poloidal component, explicitly calculating the quadrature. Following eq. (112) in Ivers & Phillips (2008).\n\n\n\n\n\n","category":"method"},{"location":"forces/coriolis/#Limace._coriolis_tt-Union{Tuple{T}, Tuple{T, Vararg{Any, 4}}} where T<:Basis","page":"Coriolis","title":"Limace._coriolis_tt","text":"_coriolis_tt(b::Basis, lmna, lmnb, r, wr; Ω) -> Any\n\n\nFallback for Coriolis term between toroidal and toroidal component, explicitly calculating the quadrature.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Limace","category":"page"},{"location":"#Limace","page":"Home","title":"Limace","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Limace.","category":"page"}]
}
